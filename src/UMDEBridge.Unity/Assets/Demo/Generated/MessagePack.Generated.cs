// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(11)
            {
                { typeof(global::Demo.Scripts.Master.Item.StatModifier.StatModifier[]), 0 },
                { typeof(global::Demo.Scripts.Master.Item.StatModifier.ModTargetType), 1 },
                { typeof(global::Demo.Scripts.Master.Item.StatModifier.StatModType), 2 },
                { typeof(global::Demo.Scripts.Master.Item2.SomeType), 3 },
                { typeof(global::Demo.Scripts.Master.Item.Model.Item), 4 },
                { typeof(global::Demo.Scripts.Master.Item2.Item2), 5 },
                { typeof(global::Demo.Scripts.Master.Item.Model.EquipItem), 6 },
                { typeof(global::Demo.Scripts.Master.Item.Model.ItemTier), 7 },
                { typeof(global::Demo.Scripts.Master.Item.Model.UnitItem), 8 },
                { typeof(global::Demo.Scripts.Master.Item.StatModifier.StatModifier), 9 },
                { typeof(global::Demo.Scripts.Master.Item2.UnitItem2), 10 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Demo.Scripts.Master.Item.StatModifier.StatModifier>();
                case 1: return new MessagePack.Formatters.Demo.Scripts.Master.Item.StatModifier.ModTargetTypeFormatter();
                case 2: return new MessagePack.Formatters.Demo.Scripts.Master.Item.StatModifier.StatModTypeFormatter();
                case 3: return new MessagePack.Formatters.Demo.Scripts.Master.Item2.SomeTypeFormatter();
                case 4: return new MessagePack.Formatters.Demo.Scripts.Master.Item.Model.ItemFormatter();
                case 5: return new MessagePack.Formatters.Demo.Scripts.Master.Item2.Item2Formatter();
                case 6: return new MessagePack.Formatters.Demo.Scripts.Master.Item.Model.EquipItemFormatter();
                case 7: return new MessagePack.Formatters.Demo.Scripts.Master.Item.Model.ItemTierFormatter();
                case 8: return new MessagePack.Formatters.Demo.Scripts.Master.Item.Model.UnitItemFormatter();
                case 9: return new MessagePack.Formatters.Demo.Scripts.Master.Item.StatModifier.StatModifierFormatter();
                case 10: return new MessagePack.Formatters.Demo.Scripts.Master.Item2.UnitItem2Formatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item.StatModifier
{

    public sealed class ModTargetTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.StatModifier.ModTargetType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.StatModifier.ModTargetType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Demo.Scripts.Master.Item.StatModifier.ModTargetType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Demo.Scripts.Master.Item.StatModifier.ModTargetType)reader.ReadInt32();
        }
    }

    public sealed class StatModTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.StatModifier.StatModType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.StatModifier.StatModType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Demo.Scripts.Master.Item.StatModifier.StatModType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Demo.Scripts.Master.Item.StatModifier.StatModType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item2
{

    public sealed class SomeTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item2.SomeType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item2.SomeType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Demo.Scripts.Master.Item2.SomeType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Demo.Scripts.Master.Item2.SomeType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item.Model
{
    public sealed class ItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.Model.Item>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public ItemFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Demo.Scripts.Master.Item.Model.UnitItem).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Demo.Scripts.Master.Item.Model.EquipItem).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.Model.Item value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.Model.UnitItem>(options.Resolver).Serialize(ref writer, (global::Demo.Scripts.Master.Item.Model.UnitItem)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.Model.EquipItem>(options.Resolver).Serialize(ref writer, (global::Demo.Scripts.Master.Item.Model.EquipItem)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Demo.Scripts.Master.Item.Model.Item Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Demo.Scripts.Master.Item.Model.Item");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Demo.Scripts.Master.Item.Model.Item result = null;
            switch (key)
            {
                case 0:
                    result = (global::Demo.Scripts.Master.Item.Model.Item)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.Model.UnitItem>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Demo.Scripts.Master.Item.Model.Item)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.Model.EquipItem>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item2
{
    public sealed class Item2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item2.Item2>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public Item2Formatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(1, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Demo.Scripts.Master.Item2.UnitItem2).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(1)
            {
                { 0, 0 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item2.Item2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item2.UnitItem2>(options.Resolver).Serialize(ref writer, (global::Demo.Scripts.Master.Item2.UnitItem2)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Demo.Scripts.Master.Item2.Item2 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Demo.Scripts.Master.Item2.Item2");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Demo.Scripts.Master.Item2.Item2 result = null;
            switch (key)
            {
                case 0:
                    result = (global::Demo.Scripts.Master.Item2.Item2)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item2.UnitItem2>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item.Model
{
    public sealed class EquipItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.Model.EquipItem>
    {
        // Modifiers
        private static global::System.ReadOnlySpan<byte> GetSpan_Modifiers() => new byte[1 + 9] { 169, 77, 111, 100, 105, 102, 105, 101, 114, 115 };
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Text
        private static global::System.ReadOnlySpan<byte> GetSpan_Text() => new byte[1 + 4] { 164, 84, 101, 120, 116 };
        // Icon
        private static global::System.ReadOnlySpan<byte> GetSpan_Icon() => new byte[1 + 4] { 164, 73, 99, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.Model.EquipItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Modifiers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.StatModifier.StatModifier[]>(formatterResolver).Serialize(ref writer, value.Modifiers, options);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Text());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Text, options);
            writer.WriteRaw(GetSpan_Icon());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Icon, options);
        }

        public global::Demo.Scripts.Master.Item.Model.EquipItem Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Modifiers__ = default(global::Demo.Scripts.Master.Item.StatModifier.StatModifier[]);
            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Text__ = default(string);
            var __Icon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Modifiers().Slice(1))) { goto FAIL; }

                        __Modifiers__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.StatModifier.StatModifier[]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1954047316UL:
                                __Text__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1852793673UL:
                                __Icon__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            var ____result = new global::Demo.Scripts.Master.Item.Model.EquipItem(__Id__, __Name__, __Text__, __Icon__, __Modifiers__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemTierFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.Model.ItemTier>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Price
        private static global::System.ReadOnlySpan<byte> GetSpan_Price() => new byte[1 + 5] { 165, 80, 114, 105, 99, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.Model.ItemTier value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Price());
            writer.Write(value.Price);
        }

        public global::Demo.Scripts.Master.Item.Model.ItemTier Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Price__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435459551824UL) { goto FAIL; }

                        __Price__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::Demo.Scripts.Master.Item.Model.ItemTier(__Id__, __Name__, __Price__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnitItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.Model.UnitItem>
    {
        // Hp
        private static global::System.ReadOnlySpan<byte> GetSpan_Hp() => new byte[1 + 2] { 162, 72, 112 };
        // Attack
        private static global::System.ReadOnlySpan<byte> GetSpan_Attack() => new byte[1 + 6] { 166, 65, 116, 116, 97, 99, 107 };
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Text
        private static global::System.ReadOnlySpan<byte> GetSpan_Text() => new byte[1 + 4] { 164, 84, 101, 120, 116 };
        // Icon
        private static global::System.ReadOnlySpan<byte> GetSpan_Icon() => new byte[1 + 4] { 164, 73, 99, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.Model.UnitItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(GetSpan_Hp());
            writer.Write(value.Hp);
            writer.WriteRaw(GetSpan_Attack());
            writer.Write(value.Attack);
            writer.WriteRaw(GetSpan_Id());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Text());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Text, options);
            writer.WriteRaw(GetSpan_Icon());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Icon, options);
        }

        public global::Demo.Scripts.Master.Item.Model.UnitItem Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Hp__ = default(int);
            var __Attack__ = default(int);
            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Text__ = default(string);
            var __Icon__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28744UL:
                                __Hp__ = reader.ReadInt32();
                                continue;
                            case 25673UL:
                                __Id__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 118074580956225UL) { goto FAIL; }

                        __Attack__ = reader.ReadInt32();
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1954047316UL:
                                __Text__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1852793673UL:
                                __Icon__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            var ____result = new global::Demo.Scripts.Master.Item.Model.UnitItem(__Id__, __Name__, __Text__, __Icon__, __Hp__, __Attack__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item.StatModifier
{
    public sealed class StatModifierFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item.StatModifier.StatModifier>
    {
        // value
        private static global::System.ReadOnlySpan<byte> GetSpan_value() => new byte[1 + 5] { 165, 118, 97, 108, 117, 101 };
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_type() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // targetType
        private static global::System.ReadOnlySpan<byte> GetSpan_targetType() => new byte[1 + 10] { 170, 116, 97, 114, 103, 101, 116, 84, 121, 112, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item.StatModifier.StatModifier value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_value());
            writer.Write(value.value);
            writer.WriteRaw(GetSpan_type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.StatModifier.StatModType>(formatterResolver).Serialize(ref writer, value.type, options);
            writer.WriteRaw(GetSpan_targetType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.StatModifier.ModTargetType>(formatterResolver).Serialize(ref writer, value.targetType, options);
        }

        public global::Demo.Scripts.Master.Item.StatModifier.StatModifier Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Demo.Scripts.Master.Item.StatModifier.StatModifier();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435761734006UL) { goto FAIL; }

                        ____result.value = reader.ReadSingle();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701869940UL) { goto FAIL; }

                        ____result.type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.StatModifier.StatModType>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_targetType().Slice(1))) { goto FAIL; }

                        ____result.targetType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item.StatModifier.ModTargetType>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Demo.Scripts.Master.Item2
{
    public sealed class UnitItem2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Demo.Scripts.Master.Item2.UnitItem2>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Demo.Scripts.Master.Item2.UnitItem2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Id, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Text, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Icon, options);
            writer.Write(value.Hp);
            writer.Write(value.Attack);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item2.SomeType>(formatterResolver).Serialize(ref writer, value.SomeType, options);
        }

        public global::Demo.Scripts.Master.Item2.UnitItem2 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Hp__ = default(int);
            var __Attack__ = default(int);
            var __Id__ = default(string);
            var __Name__ = default(string);
            var __Text__ = default(string);
            var __Icon__ = default(string);
            var __SomeType__ = default(global::Demo.Scripts.Master.Item2.SomeType);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Name__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Text__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Icon__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Hp__ = reader.ReadInt32();
                        break;
                    case 5:
                        __Attack__ = reader.ReadInt32();
                        break;
                    case 6:
                        __SomeType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Demo.Scripts.Master.Item2.SomeType>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Demo.Scripts.Master.Item2.UnitItem2(__Id__, __Name__, __Text__, __Icon__, __Hp__, __Attack__, __SomeType__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

