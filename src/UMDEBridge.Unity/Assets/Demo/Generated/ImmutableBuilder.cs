// <auto-generated />
#pragma warning disable CS0105
using Demo.Scripts.Master.Item.Model;
using Demo.Scripts.Master.Item2;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Linq;
using System;
using UnityEditor;
using UnityEngine;
using MD.Tables;

namespace MD
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Item> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new ItemTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.Item2Table,
                memory.ItemTierTable
            
            );
        }

        public void RemoveItem(string[] keys)
        {
            var data = RemoveCore(memory.ItemTable.GetRawDataUnsafe(), keys, x => x.Id, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new ItemTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.Item2Table,
                memory.ItemTierTable
            
            );
        }

        public void Diff(Item[] addOrReplaceData)
        {
            var data = DiffCore(memory.ItemTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new ItemTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.Item2Table,
                memory.ItemTierTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Item2> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new Item2Table(newData);
            memory = new MemoryDatabase(
                memory.ItemTable,
                table,
                memory.ItemTierTable
            
            );
        }

        public void RemoveItem2(string[] keys)
        {
            var data = RemoveCore(memory.Item2Table.GetRawDataUnsafe(), keys, x => x.Id, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new Item2Table(newData);
            memory = new MemoryDatabase(
                memory.ItemTable,
                table,
                memory.ItemTierTable
            
            );
        }

        public void Diff(Item2[] addOrReplaceData)
        {
            var data = DiffCore(memory.Item2Table.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new Item2Table(newData);
            memory = new MemoryDatabase(
                memory.ItemTable,
                table,
                memory.ItemTierTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ItemTier> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new ItemTierTable(newData);
            memory = new MemoryDatabase(
                memory.ItemTable,
                memory.Item2Table,
                table
            
            );
        }

        public void RemoveItemTier(string[] keys)
        {
            var data = RemoveCore(memory.ItemTierTable.GetRawDataUnsafe(), keys, x => x.Id, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new ItemTierTable(newData);
            memory = new MemoryDatabase(
                memory.ItemTable,
                memory.Item2Table,
                table
            
            );
        }

        public void Diff(ItemTier[] addOrReplaceData)
        {
            var data = DiffCore(memory.ItemTierTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.Id, System.StringComparer.Ordinal);
            var table = new ItemTierTable(newData);
            memory = new MemoryDatabase(
                memory.ItemTable,
                memory.Item2Table,
                table
            
            );
        }

    }
}