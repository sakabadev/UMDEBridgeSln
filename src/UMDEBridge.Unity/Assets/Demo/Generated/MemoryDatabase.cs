// <auto-generated />
#pragma warning disable CS0105
using Demo.Scripts.Master.Item.Model;
using Demo.Scripts.Master.Item2;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Linq;
using System;
using UnityEditor;
using UnityEngine;
using MD.Tables;

namespace MD
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public ItemTable ItemTable { get; private set; }
        public Item2Table Item2Table { get; private set; }
        public ItemTierTable ItemTierTable { get; private set; }

        public MemoryDatabase(
            ItemTable ItemTable,
            Item2Table Item2Table,
            ItemTierTable ItemTierTable
        )
        {
            this.ItemTable = ItemTable;
            this.Item2Table = Item2Table;
            this.ItemTierTable = ItemTierTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.ItemTable = ExtractTableData<Item, ItemTable>(header, databaseBinary, options, xs => new ItemTable(xs));
            this.Item2Table = ExtractTableData<Item2, Item2Table>(header, databaseBinary, options, xs => new Item2Table(xs));
            this.ItemTierTable = ExtractTableData<ItemTier, ItemTierTable>(header, databaseBinary, options, xs => new ItemTierTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.ItemTable = ExtractTableData<Item, ItemTable>(header, databaseBinary, options, xs => new ItemTable(xs)),
                () => this.Item2Table = ExtractTableData<Item2, Item2Table>(header, databaseBinary, options, xs => new Item2Table(xs)),
                () => this.ItemTierTable = ExtractTableData<ItemTier, ItemTierTable>(header, databaseBinary, options, xs => new ItemTierTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.ItemTable.GetRawDataUnsafe());
            builder.Append(this.Item2Table.GetRawDataUnsafe());
            builder.Append(this.ItemTierTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.ItemTable.GetRawDataUnsafe());
            builder.Append(this.Item2Table.GetRawDataUnsafe());
            builder.Append(this.ItemTierTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                ItemTable,
                Item2Table,
                ItemTierTable,
            });

            ((ITableUniqueValidate)ItemTable).ValidateUnique(result);
            ValidateTable(ItemTable.All, database, "Id", ItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)Item2Table).ValidateUnique(result);
            ValidateTable(Item2Table.All, database, "Id", Item2Table.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemTierTable).ValidateUnique(result);
            ValidateTable(ItemTierTable.All, database, "Id", ItemTierTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "Item":
                    return db.ItemTable;
                case "Item2":
                    return db.Item2Table;
                case "ItemTier":
                    return db.ItemTierTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("Item", MD.Tables.ItemTable.CreateMetaTable());
            dict.Add("Item2", MD.Tables.Item2Table.CreateMetaTable());
            dict.Add("ItemTier", MD.Tables.ItemTierTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}