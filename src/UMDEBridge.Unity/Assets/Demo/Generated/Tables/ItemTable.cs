// <auto-generated />
#pragma warning disable CS0105
using Demo.Scripts.Master.Item.Model;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Linq;
using System;
using UnityEditor;
using UnityEngine;

namespace MD.Tables
{
   public sealed partial class ItemTable : TableBase<Item>, ITableUniqueValidate
   {
        public Func<Item, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<Item, string> primaryIndexSelector;

        readonly Item[] secondaryIndex0;
        readonly Func<Item, ItemType> secondaryIndex0Selector;

        public ItemTable(Item[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Id;
            this.secondaryIndex0Selector = x => x.Type;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<ItemType>.Default);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<Item> SortByType => new RangeView<Item>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        public Item FindById(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, true);
        }
        
        public bool TryFindById(string key, out Item result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public Item FindClosestById(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<Item> FindRangeById(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }

        public RangeView<Item> FindByType(ItemType key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<ItemType>.Default, key);
        }

        public RangeView<Item> FindClosestByType(ItemType key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<ItemType>.Default, key, selectLower);
        }

        public RangeView<Item> FindRangeByType(ItemType min, ItemType max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<ItemType>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "Id", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(Item), typeof(ItemTable), "Item",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(Item).GetProperty("Id")),
                    new MasterMemory.Meta.MetaProperty(typeof(Item).GetProperty("Name")),
                    new MasterMemory.Meta.MetaProperty(typeof(Item).GetProperty("Text")),
                    new MasterMemory.Meta.MetaProperty(typeof(Item).GetProperty("Icon")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Item).GetProperty("Id"),
                    }, true, true, System.StringComparer.Ordinal),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Item).GetProperty("Type"),
                    }, false, false, System.Collections.Generic.Comparer<ItemType>.Default),
                });
        }

#endif
    }
}